/******************************************************************************
 *
 * Project:  AvNav ocharts-provider
 * Purpose:  gradle build script
 * Author:   Andreas Vogel
 *
 ***************************************************************************
 The MIT License (MIT)

 Copyright (c) 2020 Andreas Vogel (andreas@wellenvogel.net)

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.

 IMPORTANT: parts of the project are licensed under the GPLv2 license:
            provider/...
            s57data/...

 ***************************************************************************
 *
 */
import java.security.MessageDigest
import java.text.SimpleDateFormat
import org.apache.commons.net.ftp.*
import org.eclipse.jgit.storage.file.FileRepositoryBuilder
import org.eclipse.jgit.lib.Repository
import org.eclipse.jgit.lib.ObjectId
import org.gradle.api.*
import com.moowork.gradle.node.npm.*

def GE=org.redline_rpm.header.Flags.GREATER|org.redline_rpm.header.Flags.EQUAL
def VARIANTS=[
        [osline:'ubuntu',osversion:'bionic', arch: 'amd64', dependencies: [
                ['libc6','2.14',GE],
                ['libgcc1','1:3.0',GE],
                ['libstdc++6','5.2',GE],
                ['libwxbase3.0-0v5','3.0.4+dfsg',GE],
                ['libwxgtk3.0-0v5','3.0.4+dfsg',GE],
                ['wx3.0-i18n']
        ]],
        [osline:'raspbian',osversion:'buster',arch: 'armhf', dependencies:[
                ['libc6','2.4',GE],
                ['libgcc1','1:3.5',GE],
                ['libstdc++6','5.2',GE],
                ['libwxbase3.0-0v5','3.0.4+dfsg',GE],
                ['libwxgtk3.0-0v5','3.0.4+dfsg',GE],
                ['wx3.0-i18n']
        ]],
	
]

def DOCKER=[
        'ubuntu': ['script':file("docker/build-devenv.sh")],
        'raspbian':['script':file("docker/build-pi-cross.sh")]
]


buildscript{
    repositories{
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies{
        classpath localGroovy()
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:7.5.0'
        classpath 'commons-net:commons-net:3.3'
        classpath 'org.eclipse.jgit:org.eclipse.jgit:4.6.0.201612231935-r'
        classpath group: 'org.ccil.cowan.tagsoup', name: 'tagsoup', version: '1.2.1'
        classpath "com.moowork.gradle:gradle-node-plugin:1.3.1"
    }
}

repositories{
    mavenCentral()
}


void checkGitVersion(String version){
    logger.info("checking for git tag $version")
    FileRepositoryBuilder builder=new FileRepositoryBuilder()
    Repository repo=builder.readEnvironment().findGitDir(project.buildDir).setMustExist(true).build()
    ObjectId head=repo.resolve("HEAD")
    logger.info "current git commit=$head.name"
    def tags=repo.getTags()
    def tagCommit=tags.get(version)
    assert tagCommit,"unable to find tag $version"
    ObjectId tagResolved=repo.resolve(tagCommit.getName())
    assert tagResolved.getName() == head.getName(),"found $version ($tagResolved.name) but this is not the current HEAD"
    logger.info "version $version resolves to $tagCommit"
}

if (project.hasProperty("avnavRelease")){
    project.ext.avnavRelease=true
    logger.lifecycle "setting avnavRelease"
}
else {
    project.ext.avnavRelease=false
    def cmdLineTasks=project.gradle.getStartParameter().getTaskNames()
    cmdLineTasks.each { String t ->
        if (t.matches(/.*[rR]elease.*/)) {
            project.ext.avnavRelease = true
            logger.lifecycle "seeting avnavRelease due to task $t"
        }
    }
}
if (! project.hasProperty('packageVersion')){
    SimpleDateFormat f=new SimpleDateFormat('YYYYMMdd')
    project.ext.avnavVersion=f.format(new Date())
}
else{
    project.ext.avnavVersion=project.packageVersion
}

logger.lifecycle "ProjectVersion=${project.avnavVersion}"


description="AvNav chart provider for o-charts"
apply plugin: 'java'

apply plugin: 'nebula.ospackage-base'
apply plugin: 'com.moowork.node'


class MyNpm extends NpmTask{
    def subDir
    @InputFiles
    def getInputFiles(){
        logger.debug "getInputFiles called for $name"
        return project.fileTree(project.projectDir,{
            exclude "build/**"
            exclude ".gradle/**"
        })
    }
    @OutputFiles
    def getOutputFiles(){
        logger.debug "getOutputFiles called for $name"
        return project.fileTree(project.projectDir,{
            include "build/$subDir/**"
        })
    }
    @OutputDirectory
    def getOutDir(){
        return project.file("build/$subDir")
    }
    public MyNpm(){
        outputs.upToDateWhen{
            def od=getOutDir()
            logger.debug "checking $od"
            if (! od.exists()) return false;
            return true
        }
    }
}

project(":gui") {
    apply plugin: 'com.moowork.node'
    task viewerRelease(type: MyNpm) {
        subDir = "release"
        args = ["run", "release"]
        setExecOverrides({
            it.environment.put('AVNAV_VERSION', rootProject.avnavVersion)
        })
        dependsOn npmInstall
    }
    task viewerDebug(type: MyNpm) {
        subDir = "debug"
        args = ["run", "build"]
        setExecOverrides({
            it.environment.put('AVNAV_VERSION', rootProject.avnavVersion+"-debug")
        })
        dependsOn npmInstall
    }
}

task testGit{
    doLast() {
        try {
            checkGitVersion((project.avnavRelease ? "release-" : "") + project.avnavVersion)
        } catch (Error t) {
            if (!project.hasProperty("avnavIgnoreGit")) throw t;
            logger.lifecycle "### ignoring failed GIT check ###"
        }
    }
}




task pkgVersion{
    doLast() {
        ospackage.version = project.avnavVersion
        println "package version $ospackage.version"
    }
}

task packages{
    doLast(){
        println "created all packages"
    }
}

def emptyBase=new File(project.buildDir,"empty")
ospackage {
    //release='3'
    os = LINUX // only applied to RPM
    packageGroup='misc'
    packageName='avnav-ocharts-plugin'
    requires('xvfb')
    requires('avnav')
    requires('openssl')
    requires('libarchive13')
    requires('libglu1-mesa')
    requires('python-psutil')
    user='root'
    into ('/usr/lib/avnav/plugins/ocharts') {
        from('s57data'){
            into "share/opencpn/s57data"
        }
        from('gui/build/release'){
            into "gui"
        }
        from('avnav-plugin') {
            include "*.py"
            include "*.sh"
            include "*.css"
            fileMode 0755
        }
        from('.'){
            include 'avnav.conf'
        }
    }
}

VARIANTS.each { variant ->
    def dockercfg=DOCKER[variant.osline]
    assert dockercfg != null
    def suffix="${variant.osline}-${variant.osversion}"
    def imageName="opencpn-build:${variant.osline}-${variant.osversion}"
    def dt=tasks.create(name: "dockerbuild-${suffix}",type: Exec){ Exec e->
        e.executable(dockercfg.script)
        e.workingDir(file("docker"))
        e.environment([CONTINUE:1])
        e.args("-l",variant.osline,"-r",variant.osversion,"-t",imageName)
    }
    logger.lifecycle("created docker build task ${dt.name}")
    def buildTarget="release"
    if (variant.osline == "raspbian") buildTarget="raspi"
    def exeBuild=tasks.create(name:"build-${suffix}",type: Exec){ Exec e->
        e.workingDir(file("provider"))
        e.executable(file("provider/build.sh"))
        e.args("-a","-i",imageName,"-b","${suffix}","-u")
        if (project.hasProperty("cleanBefore")) {
            e.args("-c")
        }
        e.args(buildTarget)
    }
    tasks.build.dependsOn(exeBuild)
    logger.lifecycle("created build task ${exeBuild.name}")
    def buildOutput="provider/${suffix}"
    def exeName="AvnavOchartsProvider"
    def tkHandler="tokenHandler.js"
    def debBuild=tasks.create(name:"package-${suffix}",type: Deb){  d ->
        variant.dependencies.each { dep->
            d.requires dep
        }
        d.packageName "avnav-ocharts-plugin"
        d.version="${project.avnavVersion}-${suffix}"
        d.arch=variant.arch
        d.into("/usr/lib/avnav/plugins/ocharts"){
            from(buildOutput) {
                include exeName
                fileMode 0755
            }
            from(buildOutput) {
                include tkHandler
            }
        }
        d.doFirst{
            assert file("${buildOutput}/${exeName}").exists()
        }
    }
    debBuild.dependsOn(exeBuild)
    debBuild.dependsOn(':gui:viewerRelease')
    tasks.packages.dependsOn debBuild
    def cleanTask=tasks.create(name: "clean-${suffix}",type: Delete){ c->
        delete buildOutput
    }
    tasks.clean.dependsOn(cleanTask)
}


def md5( obj ) {
    def hash = MessageDigest.getInstance( 'MD5' ).with {
        obj.eachByte( 8192 ) { bfr, num ->
            update bfr, 0, num
        }
        it.digest()
    }
    return new BigInteger( 1, hash ).toString( 16 ).padLeft( 32, '0' )

}
def computeHashes(fileTree){
    def rt=[:]
    fileTree.visit { FileVisitDetails element ->
        if (element.isDirectory()) return
        def name=element.getPath()
        def hash=md5(element.open())
        rt.put(name,hash)
    }
    return rt
}

class UploadTask extends DefaultTask{

    protected createdDirs=[]
    private void checkReply(FTPClient ftp){
        if (! FTPReply.isPositiveCompletion(ftp.getReplyCode())){
            throw new Exception("negative ftp reply: "+ftp.getReplyString())
        }
    }

    protected Hashes=[:]

    private void removeRemoteDir(FTPClient ftpClient, String dirToList) {
        logger.info("delete remote dir $dirToList")
        FTPFile[] subFiles = ftpClient.listFiles(dirToList);
        if (subFiles != null && subFiles.length > 0) {
            for (FTPFile aFile : subFiles) {
                String currentFileName = aFile.getName();
                if (currentFileName.equals(".") || currentFileName.equals("..")) {
                    // skip parent directory and the directory itself
                    continue;
                }
                String filePath = dirToList + "/"+currentFileName
                if (aFile.isDirectory()) {
                    // remove the sub directory
                    removeRemoteDir(ftpClient, filePath);
                } else {
                    // delete the file
                    boolean deleted = ftpClient.deleteFile(filePath);
                }
            }

            // finally, remove the directory itself
            boolean removed = ftpClient.removeDirectory(dirToList);
        }
    }
    /**
     * create a remote dir and change to it
     * @param client
     * @param path
     */
    private void createRemoteDir(FTPClient client,String path){
        if (createdDirs.contains(path)) return
        boolean abs=false
        if (path.startsWith("/")){
            abs=true
            path=path.substring(1)
        }
        def dirs=path.split(/\//)
        def curpath=""
        if (abs){
            boolean res=client.changeWorkingDirectory("/")
            if (! res){
                String wd=client.printWorkingDirectory()
                logger.info("current working dir=$wd")
                if (wd == "/") res=true
            }
            assert res,"unable to change to ftp root dir"
            curpath="/"
        }
        dirs.each{ String dir->

            org.apache.commons.net.ftp.FTPFile [] subFiles=client.listDirectories()
            boolean res=false
            curpath+="$dir/"
            if (subFiles != null && subFiles.contains(dir)){
                logger.info("directory $curpath/$dir already exists")
                res=client.changeWorkingDirectory(dir)
            }
            else{
                client.makeDirectory(dir)
                res=client.changeWorkingDirectory(dir)
            }
            assert res,"unable to change to ftp directory $curpath"
        }
        createdDirs.add(path)
    }

    protected void uploadFile(FTPClient ftp,String dir,File ifile){
        createRemoteDir(ftp,dir)
        ftp.setFileType(FTP.BINARY_FILE_TYPE)
        FileInputStream is=new FileInputStream(ifile)
        logger.lifecycle("uploading $ifile to $dir")
        def targetName=ifile.getName()
        if (getTargetName != null){
            targetName=getTargetName(ifile)
        }
        try {
            ftp.storeFile(targetName, is)
        }catch (Exception e){
            logger.error("Exception while uploading: ",e)
            e.printStackTrace()
            throw e
        }
        logger.lifecycle("upload of $ifile complete")
    }

    protected void writeRemoteHashes(FTPClient ftp,String baseDir,HashMap hashes){
        createRemoteDir(ftp,baseDir)
        ftp.setFileType(FTP.BINARY_FILE_TYPE)
        def os=ftp.storeFileStream(hashFileName)
        os.withPrintWriter { wr ->
            hashes.each { name, md5 ->
                logger.debug("writing remote hash entry name=${name}, hash=${md5}")
                wr.println("${md5} ${name}")
            }
        }
        ftp.completePendingCommand()
    }

    protected Map readRemoteHashes(FTPClient ftp, String baseDir){
        def rt=[:]
        ftp.setFileType(FTP.BINARY_FILE_TYPE)
        def cs=ftp.changeWorkingDirectory(baseDir)
        if ( !cs){
            logger.info("base dir ${baseDir} not found in remote, unable to read hashes")
            return null
        }
        logger.info("trying to read remote hash file ${baseDir}/${hashFileName}")
        def is=ftp.retrieveFileStream(hashFileName)
        if (is == null) {
            logger.info("ftp reply code was ${ftp.getReplyCode()}")
            return null
        }
        is.withReader{ rd->
            rd.readLines().each{ line->
                def nv=line.split(" ",2)
                if (nv.size() < 2){
                    logger.info("invalid line in remote hash: ${line}, ignoring")
                    return
                }
                logger.debug("reading remotze hash, name=${nv[1]}, md5=${nv[0]}")
                rt.put(nv[1],nv[0])
            }
        }
        ftp.completePendingCommand();
        return rt
    }
    def server="www.wellenvogel.net"
    def baseDir="/www/software/avnav/downloads/daily"
    def subDir=project.avnavVersion
    def useHashes=false
    def hashFileName="_hashes"

    File inputFile
    def getTargetName=null
    FileTree inputFiles
    boolean deleteTargetDir=false
    @TaskAction
    public void exec(){
        /*
        project.exec {
            commandLine "ping","$server"
        }
        */
        assert (inputFile!=null || inputFiles!=null),"missing task parameter inputFile(s)"
        assert project.hasProperty("avnavVersion")
        logger.info("uploading to $server")
        def ftp=new FTPClient();
        def user=System.getenv("AVNAV_REPO_USER")
        assert user!=null,"missing environment variable AVNAV_REPO_USER"
        def passwd=System.getenv("AVNAV_REPO_PASSWD")
        assert passwd !=null,"missing environemt variable AVNAV_REPO_PASSWD"
        ftp.connect(server)
        checkReply(ftp)
        ftp.login(user,passwd)
        checkReply(ftp)
        ftp.enterLocalPassiveMode()
        ftp.setBufferSize(1024*1024)
        def dir=baseDir
        def remoteDir=(subDir!=null)?baseDir+"/"+subDir:baseDir
        if (inputFile != null){
            assert inputFile.exists(),"input file $inputFile does not exist"
            if (deleteTargetDir) removeRemoteDir(ftp,remoteDir)
            uploadFile(ftp,remoteDir,inputFile)
        }
        else{
            def skipList=[:]
            def removeList=[:]
            def hasChanges=false
            if (deleteTargetDir) removeRemoteDir(ftp,dir)
            if (useHashes && ! deleteTargetDir){
                logger.info("computing local hashes")
                Hashes=project.computeHashes(inputFiles)
                def remoteHashes=readRemoteHashes(ftp,dir)
                if (remoteHashes == null){
                    hasChanges=true
                    logger.lifecycle("no remote hashes file found, deleting remote dir")
                    removeRemoteDir(ftp,dir)
                }
                else{
                   Hashes.each{ name,md5 ->
                       def remote=remoteHashes.get(name)
                       if (remote != null){
                           if (remote == md5){
                               logger.info("skipping file ${name} due to equal hash")
                               skipList.put(name,true)
                           }
                           else{
                               logger.info("changed hash for ${name}")
                               hasChanges=true
                           }
                       }
                       else{
                           hasChanges=true
                       }
                   }
                   remoteHashes.each { name,md5 ->
                       if (Hashes.get(name) != null) return;
                       logger.info("marking remote file ${name} for deletion")
                       removeList.put(name,true)
                       hasChanges=true
                   }
                   if (hasChanges) ftp.deleteFile(dir+"/"+hashFileName)
                }
            }
            inputFiles.visit {FileVisitDetails element->
                if (!element.isDirectory()) {
                    if (skipList.get(element.getPath())){
                        logger.debug("skipping upload for ${element.getPath()}")
                        return
                    }
                    String dirname = (dir + "/" + element.relativePath.getPathString()).replaceAll('/[^/]*$', '')
                    uploadFile(ftp, dirname, element.getFile())
                }
            }
            removeList.each{ name,flag ->
                String fileName=dir+"/"+name
                logger.info("removing remote file ${fileName}")
                ftp.deleteFile(fileName)
            }
            if (useHashes && hasChanges){
                logger.info("writing remote hashes")
                writeRemoteHashes(ftp,dir,Hashes)
            }


        }
        //checkReply(ftp)
        ftp.disconnect()
    }
}

